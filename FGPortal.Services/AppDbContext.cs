// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using FGPortal.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace FGPortal.Services
{
    public partial class AppDbContext : DbContext
    {
        public AppDbContext() : base()
        {
        }

        public AppDbContext(DbContextOptions<AppDbContext> options)
            : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            var configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json")
                .Build();

            var connectionString = configuration.GetConnectionString("Default");
            optionsBuilder.UseSqlServer(connectionString);
        }

        public virtual DbSet<Courier> Courier { get; set; }
        public virtual DbSet<CourierCoverage> CourierCoverage { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<Driver> Driver { get; set; }
        public virtual DbSet<FGPortal.Models.Exception> Exception { get; set; }
        public virtual DbSet<ExceptionType> ExceptionType { get; set; }
        public virtual DbSet<FileContent> FileContent { get; set; }
        public virtual DbSet<Fleet> Fleet { get; set; }
        public virtual DbSet<InternetUser> InternetUser { get; set; }
        public virtual DbSet<InternetUserMapping> InternetUserMapping { get; set; }
        public virtual DbSet<InternetUserViewable> InternetUserViewable { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<MessageLog> MessageLog { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderParcel> OrderParcel { get; set; }
        public virtual DbSet<ParcelType> ParcelType { get; set; }
        public virtual DbSet<PortalAnnouncement> PortalAnnouncement { get; set; }
        public virtual DbSet<Route> Route { get; set; }
        public virtual DbSet<RoutePerformance> RoutePerformance { get; set; }
        public virtual DbSet<RouteStop> RouteStop { get; set; }
        public virtual DbSet<RouteStopArchive> RouteStopArchive { get; set; }
        public virtual DbSet<RouteStopHistory> RouteStopHistory { get; set; }
        public virtual DbSet<RouteStopParcel> RouteStopParcel { get; set; }
        public virtual DbSet<RouteStopType> RouteStopType { get; set; }
        public virtual DbSet<ServiceLevel> ServiceLevel { get; set; }
        public virtual DbSet<ServiceType> ServiceType { get; set; }
        public virtual DbSet<Signature> Signature { get; set; }
        public virtual DbSet<SupportTicket> SupportTicket { get; set; }
        public virtual DbSet<TransactionLog> TransactionLog { get; set; }
        public virtual DbSet<UserPreference> UserPreference { get; set; }
        public virtual DbSet<UserRestriction> UserRestriction { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Courier>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Address1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedWhen).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Phone1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Plus4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Zip)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CourierCoverage>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.ZipCode)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.CourierCoverage)
                    .HasForeignKey(d => d.CourierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CourierCo__Couri__2F9A1060");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CourierCoverage)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CourierCo__Custo__308E3499");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Address1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedWhen).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.Phone1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Plus4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Zip)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK__Customer__Parent__245D67DE");
            });

            modelBuilder.Entity<Driver>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Address1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CourierDriverId).HasColumnName("CourierDriverID");

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedWhen).HasColumnType("datetime");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.FleetId).HasColumnName("FleetID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Phone1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Plus4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RouteIdext)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RouteIDExt");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Zip)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FGPortal.Models.Exception>(entity =>
            {
                entity.HasIndex(e => new { e.ExceptionTypeID, e.DisplayPortal }, "ix_Exception_ExceptionTypeID_DisplayPortal_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ExceptionTypeID, e.RouteStopID }, "ix_Exception_ExceptionTypeID_RouteStopID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ExceptionTypeID, "ix_Exception_ExceptionTypeID_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ExceptionTypeID, "ix_Exception_ExceptionTypeID_includes4")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.RouteStopID, e.DisplayPortal }, "ix_Exception_RouteStopID_DisplayPortal_includes")
                    .HasFillFactor(100);

                entity.Property(e => e.ID).HasColumnName("ID");

                entity.Property(e => e.CCPMsgID)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CCPMsgID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayPortal)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EmailAlertStep).HasDefaultValueSql("((0))");

                entity.Property(e => e.ExceptionTypeID).HasColumnName("ExceptionTypeID");

                entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Lon).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.OrderID).HasColumnName("OrderID");

                entity.Property(e => e.OrderParcelID).HasColumnName("OrderParcelID");

                entity.Property(e => e.RouteStopID).HasColumnName("RouteStopID");

                entity.Property(e => e.RouteStopParcelID).HasColumnName("RouteStopParcelID");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusComment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.StatusDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Timestamp).HasColumnType("datetime");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Exception)
                    .HasForeignKey(d => d.OrderID)
                    .HasConstraintName("FK__Exception__Order__24285DB4");

                entity.HasOne(d => d.OrderParcel)
                    .WithMany(p => p.Exception)
                    .HasForeignKey(d => d.OrderParcelID)
                    .HasConstraintName("FK__Exception__Order__251C81ED");

                entity.HasOne(d => d.RouteStopParcel)
                    .WithMany(p => p.Exception)
                    .HasForeignKey(d => d.RouteStopParcelID)
                    .HasConstraintName("FK__Exception__Route__2610A626");
            });

            modelBuilder.Entity<FileContent>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FileContent1)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("FileContent");

                entity.Property(e => e.Timestamp).HasColumnType("datetime");

                entity.Property(e => e.TlogId).HasColumnName("TLogID");

                entity.HasOne(d => d.Tlog)
                    .WithMany(p => p.FileContent)
                    .HasForeignKey(d => d.TlogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__FileConte__TLogI__28ED12D1");
            });

            modelBuilder.Entity<Fleet>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CourierFleetId).HasColumnName("CourierFleetID");

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedWhen).HasColumnType("datetime");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Plus4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedWhen).HasColumnType("datetime");

                entity.Property(e => e.Zip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.Fleet)
                    .HasForeignKey(d => d.CourierId)
                    .HasConstraintName("FK__Fleet__CourierID__2739D489");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Fleet)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK__Fleet__CustomerI__282DF8C2");
            });

            modelBuilder.Entity<InternetUser>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedWhen).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateStop)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InternetUserMapping>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.InternetUserId).HasColumnName("InternetUserID");

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.InternetUserMapping)
                    .HasForeignKey(d => d.CourierId)
                    .HasConstraintName("FK__InternetU__Couri__0B5CAFEA");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.InternetUserMapping)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK__InternetU__Custo__0C50D423");

                entity.HasOne(d => d.InternetUser)
                    .WithMany(p => p.InternetUserMapping)
                    .HasForeignKey(d => d.InternetUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__InternetU__Inter__0D44F85C");
            });

            modelBuilder.Entity<InternetUserViewable>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.InternetUserId).HasColumnName("InternetUserID");

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.InternetUserViewable)
                    .HasForeignKey(d => d.CourierId)
                    .HasConstraintName("FK__InternetU__Couri__10216507");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.InternetUserViewable)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK__InternetU__Custo__11158940");

                entity.HasOne(d => d.InternetUser)
                    .WithMany(p => p.InternetUserViewable)
                    .HasForeignKey(d => d.InternetUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__InternetU__Inter__1209AD79");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.HasIndex(e => new { e.Active, e.ContractStopId }, "ix_Location_Active_ContractStopID_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.CustomerId, e.Active, e.ContractStopId }, "ix_Location_CustomerID_Active_ContractStopID_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.CustomerId, e.CourierId, e.ContractStopId }, "ix_Location_CustomerID_CourierID_ContractStopID")
                    .HasFillFactor(100);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContractStopId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ContractStopID");

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.CourierLocationId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CourierLocationID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedWhen).HasColumnType("datetime");

                entity.Property(e => e.CustCustChildId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CustCustChildID");

                entity.Property(e => e.CustCustParentId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CustCustParentID");

                entity.Property(e => e.CustLocationId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CustLocationID");

                entity.Property(e => e.CustMiscQualifierId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CustMiscQualifierID");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.Lon).HasColumnType("decimal(9, 6)");

                entity.Property(e => e.MapUrl)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MapURL");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Plus4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedWhen).HasColumnType("datetime");

                entity.Property(e => e.Zip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.Location)
                    .HasForeignKey(d => d.CourierId)
                    .HasConstraintName("FK__Location__Courie__4589517F");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Location)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK__Location__Custom__467D75B8");
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<MessageLog>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CcpmsgId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CCPMsgID");

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.CourierReference).IsUnicode(false);

                entity.Property(e => e.CustReference).IsUnicode(false);

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.MessageLog)
                    .HasForeignKey(d => d.CourierId)
                    .HasConstraintName("FK__MessageLo__Couri__7C1A6C5A");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.MessageLog)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK__MessageLo__Custo__7D0E9093");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CcpmsgId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CCPMsgID");

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedWhen).HasColumnType("datetime");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerReference1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerReference2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryFrom).HasColumnType("datetime");

                entity.Property(e => e.DeliveryTo).HasColumnType("datetime");

                entity.Property(e => e.DestinationAddress1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DestinationAddress2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DestinationCity)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DestinationCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DestinationName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DestinationPhone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DestinationPlus4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DestinationRemarks).IsUnicode(false);

                entity.Property(e => e.DestinationState)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DestinationZip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DriverId).HasColumnName("DriverID");

                entity.Property(e => e.FleetId).HasColumnName("FleetID");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OriginAddress1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OriginAddress2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OriginCity)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OriginCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OriginName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OriginPhone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OriginPlus4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OriginRemarks).IsUnicode(false);

                entity.Property(e => e.OriginState)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OriginZip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PickupFrom).HasColumnType("datetime");

                entity.Property(e => e.PickupTo).HasColumnType("datetime");

                entity.Property(e => e.PlacedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Podsignature)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("PODSignature");

                entity.Property(e => e.Podtext)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PODText");

                entity.Property(e => e.ServiceLevelId).HasColumnName("ServiceLevelID");

                entity.Property(e => e.ServiceTypeId).HasColumnName("ServiceTypeID");

                entity.Property(e => e.TimeDelivered).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedWhen).HasColumnType("datetime");

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.CourierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Order__CourierID__6FB49575");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Order__CustomerI__70A8B9AE");

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.DriverId)
                    .HasConstraintName("FK__Order__DriverID__737BD00F");

                entity.HasOne(d => d.Fleet)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.FleetId)
                    .HasConstraintName("FK__Order__FleetID__72910220");

                entity.HasOne(d => d.ServiceLevel)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.ServiceLevelId)
                    .HasConstraintName("FK__Order__ServiceLe__73852659");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("FK__Order__ServiceTy__74794A92");
            });

            modelBuilder.Entity<OrderParcel>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Barcode)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.CcpmsgId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CCPMsgID");

                entity.Property(e => e.Comment)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedWhen).HasColumnType("datetime");

                entity.Property(e => e.CustomerReference1)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerReference2)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.ExtParcelId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ExtParcelID");

                entity.Property(e => e.Height)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Length)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.ParcelTypeId).HasColumnName("ParcelTypeID");

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedWhen).HasColumnType("datetime");

                entity.Property(e => e.Width)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderParcel)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OrderParc__Order__7755B73D");

                entity.HasOne(d => d.ParcelType)
                    .WithMany(p => p.OrderParcel)
                    .HasForeignKey(d => d.ParcelTypeId)
                    .HasConstraintName("FK__OrderParc__Parce__7849DB76");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK__OrderParc__Paren__793DFFAF");
            });

            modelBuilder.Entity<ParcelType>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedWhen).HasColumnType("datetime");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Height)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Length)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedWhen).HasColumnType("datetime");

                entity.Property(e => e.Width)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.ParcelType)
                    .HasForeignKey(d => d.CourierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ParcelTyp__Couri__489AC854");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ParcelType)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ParcelTyp__Custo__498EEC8D");
            });

            modelBuilder.Entity<PortalAnnouncement>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.StartTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Route>(entity =>
            {
                entity.HasIndex(e => new { e.CustomerId, e.CourierId, e.RouteIdext }, "ix_Route_CustomerID_CourierID_RouteIDExt")
                    .HasFillFactor(100);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CcpmsgId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CCPMsgID");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedWhen).HasColumnType("datetime");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.DefaultDriverId).HasColumnName("DefaultDriverID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DriverIdext).HasColumnName("DriverIDExt");

                entity.Property(e => e.FleetId).HasColumnName("FleetID");

                entity.Property(e => e.RouteIdext)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RouteIDExt");

                entity.Property(e => e.RouteIdextQual1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RouteIDExtQual1");

                entity.Property(e => e.RouteIdextQual2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RouteIDExtQual2");

                entity.Property(e => e.TicketNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedWhen).HasColumnType("datetime");

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.Route)
                    .HasForeignKey(d => d.CourierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Route__CourierID__2EDAF651");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Route)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Route__CustomerI__2FCF1A8A");

                entity.HasOne(d => d.DefaultDriver)
                    .WithMany(p => p.Route)
                    .HasForeignKey(d => d.DefaultDriverId)
                    .HasConstraintName("FK__Route__DefaultDr__04A65C11");

                entity.HasOne(d => d.Fleet)
                    .WithMany(p => p.Route)
                    .HasForeignKey(d => d.FleetId)
                    .HasConstraintName("FK__Route__FleetID__31B762FC");
            });

            modelBuilder.Entity<RoutePerformance>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LocationId).HasColumnName("LocationID");

                entity.Property(e => e.OTP)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("OTP");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.SevenDayOTP)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("SevenDayOTP");

                entity.Property(e => e.SumOTP).HasColumnName("SumOTP");

                entity.Property(e => e.SumSevenDayOTP).HasColumnName("SumSevenDayOTP");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.RoutePerformance)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoutePerf__Locat__0876ECF5");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.RoutePerformance)
                    .HasForeignKey(d => d.RouteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoutePerf__Route__0782C8BC");
            });

            modelBuilder.Entity<RouteStop>(entity =>
            {
                entity.HasIndex(e => new { e.PostDate, e.TimeCompleted, e.Id }, "_dta_index_RouteStop_15_158011694__K6_K12_K1_11_16");

                entity.HasIndex(e => new { e.PostDate, e.Id }, "_dta_index_RouteStop_15_158011694__K6_K1_16");

                entity.HasIndex(e => e.CreatedWhen, "ix_RouteStop_CreatedWhen_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.Podtext, "ix_RouteStop_PODText_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.PostDate, e.UpdatedWhen }, "ix_RouteStop_PostDate_UpdatedWhen_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.PostDate, e.UpdatedWhen }, "ix_RouteStop_PostDate_UpdatedWhen_includes1")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.PostDate, "ix_RouteStop_PostDate_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.PostDate, "ix_RouteStop_PostDate_includes1")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.PostDate, "ix_RouteStop_PostDate_includes2")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.PostDate, "ix_RouteStop_PostDate_includes3")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.PostDate, "ix_RouteStop_PostDate_includes_postdate")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.RouteId, e.PostDate, e.Sequence }, "ix_RouteStop_RouteID_PostDate_Sequence")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.RouteId, e.PostDate, e.Sequence }, "ix_RouteStop_RouteID_PostDate_Sequence_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.RouteId, e.PostDate }, "ix_RouteStop_RouteID_PostDate_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.TimeCompleted, e.TimeMax }, "ix_RouteStop_TimeCompleted_TimeMax")
                    .HasFillFactor(100);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Cbflag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CBFlag");

                entity.Property(e => e.CcpmsgId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CCPMsgID");

                entity.Property(e => e.CompletionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedWhen).HasColumnType("datetime");

                entity.Property(e => e.DriverId).HasColumnName("DriverID");

                entity.Property(e => e.LoadedToDw)
                    .HasColumnType("datetime")
                    .HasColumnName("LoadedToDW");

                entity.Property(e => e.LocationId).HasColumnName("LocationID");

                entity.Property(e => e.Podsignature)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("PODSignature");

                entity.Property(e => e.Podtext)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PODText");

                entity.Property(e => e.PostDate).HasColumnType("date");

                entity.Property(e => e.Reference)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Reference1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Reference2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks).IsUnicode(false);

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteStopTypeId).HasColumnName("RouteStopTypeID");

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TimeArrived).HasColumnType("datetime");

                entity.Property(e => e.TimeCompleted).HasColumnType("datetime");

                entity.Property(e => e.TimeMax).HasColumnType("datetime");

                entity.Property(e => e.TimeMin).HasColumnType("datetime");

                entity.Property(e => e.TimePreferred).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedWhen).HasColumnType("datetime");

                entity.Property(e => e.UserField0)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField8)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField9)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.RouteStop)
                    .HasForeignKey(d => d.DriverId)
                    .HasConstraintName("FK__RouteStop__Drive__0E2FC64B");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.RouteStop)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RouteStop__Locat__4C364F0E");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.RouteStop)
                    .HasForeignKey(d => d.RouteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RouteStop__Route__4E1E9780");

                entity.HasOne(d => d.RouteStopType)
                    .WithMany(p => p.RouteStop)
                    .HasForeignKey(d => d.RouteStopTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RouteStop__Route__0B5359A0");
            });

            modelBuilder.Entity<RouteStopArchive>(entity =>
            {
                entity.ToTable("RouteStopARCHIVE");

                entity.HasIndex(e => new { e.RouteId, e.PostDate, e.TimeMax, e.TimeCompleted }, "ix_RouteStopARCHIVE_RouteID_PostDate_TimeMax_TimeCompleted_includes")
                    .HasFillFactor(100);

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Cbflag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CBFlag");

                entity.Property(e => e.CcpmsgId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CCPMsgID");

                entity.Property(e => e.CompletionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedWhen).HasColumnType("datetime");

                entity.Property(e => e.DriverId).HasColumnName("DriverID");

                entity.Property(e => e.LocationId).HasColumnName("LocationID");

                entity.Property(e => e.Podsignature)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("PODSignature");

                entity.Property(e => e.Podtext)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PODText");

                entity.Property(e => e.PostDate).HasColumnType("date");

                entity.Property(e => e.Reference)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Reference1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Reference2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks).IsUnicode(false);

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteStopTypeId).HasColumnName("RouteStopTypeID");

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TimeArrived).HasColumnType("datetime");

                entity.Property(e => e.TimeCompleted).HasColumnType("datetime");

                entity.Property(e => e.TimeMax).HasColumnType("datetime");

                entity.Property(e => e.TimeMin).HasColumnType("datetime");

                entity.Property(e => e.TimePreferred).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedWhen).HasColumnType("datetime");

                entity.Property(e => e.UserField0)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField8)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserField9)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RouteStopHistory>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CcpmsgId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CCPMsgID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedWhen).HasColumnType("datetime");

                entity.Property(e => e.DriverId).HasColumnName("DriverID");

                entity.Property(e => e.LocationId).HasColumnName("LocationID");

                entity.Property(e => e.Podsignature)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("PODSignature");

                entity.Property(e => e.Podtext)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PODText");

                entity.Property(e => e.PostDate).HasColumnType("date");

                entity.Property(e => e.Reference)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks).IsUnicode(false);

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteStopTypeId).HasColumnName("RouteStopTypeID");

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TimeArrived).HasColumnType("datetime");

                entity.Property(e => e.TimeCompleted).HasColumnType("datetime");

                entity.Property(e => e.TimeMax).HasColumnType("datetime");

                entity.Property(e => e.TimeMin).HasColumnType("datetime");

                entity.Property(e => e.TimePreferred).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedWhen).HasColumnType("datetime");
            });

            modelBuilder.Entity<RouteStopParcel>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Barcode).IsUnicode(false);

                entity.Property(e => e.CcpmsgId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CCPMsgID");

                entity.Property(e => e.Comment)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedWhen).HasColumnType("datetime");

                entity.Property(e => e.CustomerReference1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerReference2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ExtParcelId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ExtParcelID");

                entity.Property(e => e.Height)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Length)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParcelTypeId).HasColumnName("ParcelTypeID");

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteStopId).HasColumnName("RouteStopID");

                entity.Property(e => e.ScannedIn).HasColumnType("datetime");

                entity.Property(e => e.ScannedInBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScannedInDepotId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ScannedInDepotID");

                entity.Property(e => e.ScannedOut).HasColumnType("datetime");

                entity.Property(e => e.ScannedOutBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScannedOutDepotId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ScannedOutDepotID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedWhen).HasColumnType("datetime");

                entity.Property(e => e.Width)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ParcelType)
                    .WithMany(p => p.RouteStopParcel)
                    .HasForeignKey(d => d.ParcelTypeId)
                    .HasConstraintName("FK__RouteStop__Parce__4C6B5938");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK__RouteStop__Paren__4D5F7D71");

                entity.HasOne(d => d.RouteStop)
                    .WithMany(p => p.RouteStopParcel)
                    .HasForeignKey(d => d.RouteStopId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RouteStop__Route__4E53A1AA");
            });

            modelBuilder.Entity<RouteStopType>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.RouteStopType)
                    .HasForeignKey(d => d.CourierId)
                    .HasConstraintName("FK__RouteStop__Couri__339FAB6E");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.RouteStopType)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK__RouteStop__Custo__3493CFA7");
            });

            modelBuilder.Entity<ServiceLevel>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.ServiceLevel)
                    .HasForeignKey(d => d.CourierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ServiceLe__Couri__55F4C372");
            });

            modelBuilder.Entity<ServiceType>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.ServiceType)
                    .HasForeignKey(d => d.CourierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ServiceTy__Couri__58D1301D");
            });

            modelBuilder.Entity<Signature>(entity =>
            {
                entity.HasIndex(e => e.CcpmsgId, "IX_Signature_CCPMsgID");

                entity.HasIndex(e => e.RouteStopId, "ix_Signature_RouteStopID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.RouteStopId, "ix_Signature_RouteStopID_includes")
                    .HasFillFactor(100);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CcpmsgId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CCPMsgID");

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.RouteStopId).HasColumnName("RouteStopID");

                entity.Property(e => e.SignatureSvg)
                    .IsUnicode(false)
                    .HasColumnName("SignatureSVG");

                entity.Property(e => e.SignatureUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SignatureURL");

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.Signature)
                    .HasForeignKey(d => d.CourierId)
                    .HasConstraintName("FK_Signature_Courier");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Signature)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Signature_Customer");
            });

            modelBuilder.Entity<SupportTicket>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Priority)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TimeStamp).HasColumnType("datetime");

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SupportTicket)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SupportTi__UserI__3B0BC30C");
            });

            modelBuilder.Entity<TransactionLog>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CcpfileId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CCPFileID");

                entity.Property(e => e.CourierId).HasColumnName("CourierID");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Direction)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.File)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Port)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Timestamp).HasColumnType("datetime");

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.TransactionLog)
                    .HasForeignKey(d => d.CourierId)
                    .HasConstraintName("FK__Transacti__Couri__14E61A24");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.TransactionLog)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK__Transacti__Custo__15DA3E5D");
            });

            modelBuilder.Entity<UserPreference>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserPreference)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__UserPrefe__UserI__18B6AB08");
            });

            modelBuilder.Entity<UserRestriction>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.RestrictionType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RestrictionValue)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TimeStamp).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRestriction)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserRestriction_InternetUser");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}